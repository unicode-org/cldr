package org.unicode.cldr.tool;

import java.io.PrintStream;
import java.io.Writer;
import java.util.Iterator;
import java.util.TreeSet;

import org.unicode.cldr.util.CLDRPaths;
import org.unicode.cldr.util.CLDRTool;
import org.unicode.cldr.util.CldrUtility;
import org.unicode.cldr.util.TempPrintWriter;

import com.ibm.icu.dev.tool.UOption;
import com.ibm.icu.text.UnicodeSet;

@CLDRTool(alias = "kbd", description = "Tool for working with CLDR Keyboard files")
public class KeyboardTool {

    private static final UOption[] options = {
        UOption.HELP_H(),
        UOption.HELP_QUESTION_MARK(),
        UOption.create("flatten", 'F', UOption.REQUIRES_ARG),
        UOption.create("implied-keys", 'I', UOption.NO_ARG),
    };

    public static void help() {
        System.out.println("CLDR Keyboard Tool\n" +
            "----\n" +
            "Usage:\n" +
            " -h | --help | -?                          print this help\n" +
            " -F infile.xml | --flatten infile.xml > outfile.xml      print a flattened xml to stdout, without imports\n" +
            " -I | --implied-keys                       Update keyboards/import/keys-Latn-implied.xml\n" +
            "");
    }

    public static void main(String args[]) throws Throwable {
        UOption.parseArgs(args, options);
        if (options[0].doesOccur || options[1].doesOccur) {
            help();
        } else if(options[2].doesOccur) {
            System.err.println("Flatten: " + options[2].value);
            KeyboardFlatten.flatten(options[2].value, System.out);
        } else if (options[3].doesOccur) {
            String impliedPath = CLDRPaths.BASE_DIRECTORY + "/keyboards/import/keys-Latn-implied.xml";
            try (TempPrintWriter out = TempPrintWriter.openUTF8Writer(impliedPath)) {
                printImpliedKeys(out);
                System.err.println("Wrote: " + impliedPath);
            }
        } else {
            help();
        }
    }

    public static void printImpliedKeys(TempPrintWriter out) {
        out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        out.println("<!--\n"
            + CldrUtility.getCopyrightString() + "\n"
            + "-->");
        out.println("<!-- GENERATED by KeyboardTool. This is the implied import for implied keys. -->\n" +
            "<!DOCTYPE keys SYSTEM \"../dtd/ldmlKeyboard.dtd\">\n" +
            "<keys>\n");

        out.println("    <key id=\"gap\" gap=\"true\" width=\"1\"/>");
        out.println("    <key id=\"space\" to=\" \" stretch=\"true\" width=\"1\"/>");
        out.println();

        // add only keys that match the definition of the "id" string
        final TreeSet<String> strs = new TreeSet<String>();
        final UnicodeSet idset = new UnicodeSet("[a-zA-Z0-9]");

        for(Iterator<String> i = idset.iterator(); i.hasNext(); ) {
            strs.add(i.next());
        }

        for(final String s : strs) {
            out.println("    <key id=\"" + s + "\" to=\"" + s + "\"/>");
        }

        out.println("</keys>\n");
    }

    public static boolean needsEscape(String s) {
        if (s.equals("\"") || s.equals("&")) {
            return true;
        }
        return false;
    }
}
